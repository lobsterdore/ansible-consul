#!/bin/bash

set -o nounset
set -o errexit

# Gaffa tape script that uses AWS tags to pick an available ID/Index from a list of hostnames
# This ID can be used to assign then pick the hostname and machine ID for services that require such a setting
# such as Kafka or Zookeeper. In the future we should replace this with Consul.
#
# Usage:
# aws_autodiscover_id [Max number of machines in cluster] "[AWS ec2 describe-instances filter]" [Name of tag used to store id] "[Optional path to file containing current ID]"
# eg.
# aws_autodiscover_id 3 "Name=tag:Environment,Values=dev Name=tag:Role,Values=zookeeper" ZookeeperId "/home/zookeeper/lib/myid"
#
# Note:
# If an ID file is passed and it exists then it's contents will be returned, so the file should contain a single line with the machines ID in it
#
# Returns:
# A 1 indexed ID or an error if all IDs are claimed

function main {
	local MAX_MACHINES=$1
	local LOOKUP_FILTER=$2
	local ID_TAG_NAME=$3
	local ID_FILE_PATH=${4-""}

	# Check to see if an ID already exists
	if [ -n "$ID_FILE_PATH" ] && stat "$ID_FILE_PATH" > /dev/null 2>&1 ; then
		cat "${ID_FILE_PATH}"
		exit 0
	fi

	local AVAILABLE_IDS=( $(seq 1 "${MAX_MACHINES}") )

	local CLAIMED_IDS=( $( aws ec2 describe-instances --filters ${LOOKUP_FILTER} --output text --query "Reservations[*].Instances[*].Tags[*] | [] | [] | [?Key=='${ID_TAG_NAME}'] | [*].Value" ) )

	# Use comm to diff the ID arrays
	local UNCLAIMED_IDS=( $( comm -13 <(for X in "${CLAIMED_IDS[@]}"; do echo "${X}"; done | sort)  <(for X in "${AVAILABLE_IDS[@]}"; do echo "${X}"; done | sort) ) )

	if [ ${#UNCLAIMED_IDS[@]} -eq 0 ]; then
	    # No free IDs, throw an error
	    exit 1
	fi

	# Return the first free ID
	echo "${UNCLAIMED_IDS[0]}"
	exit 0
}

main "$@"
